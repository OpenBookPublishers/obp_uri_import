#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Take a CSV file containing title and URIs associated to a DOI and submit new findings to the identifier translation service.

usage: python run

(c) Javier Arias, Open Book Publishers, October 2018
Use of this software is governed by the terms of the MIT license

Dependencies:
  httplib2==0.12.1
"""

import os
import sys
import csv
import json
import httplib2
import urllib.error
import urllib.parse
import urllib.request

URI_API_ENDP      = os.environ['URI_API_ENDP']
URI_API_USER      = os.environ['URI_API_USER']
URI_API_PASS      = os.environ['URI_API_PASS']
AUTH_API_ENDP     = os.environ['AUTH_API_ENDP']
URI_API_URIS      = os.environ['URI_API_URIS']

def get_token(url, email, passwd):
    h = httplib2.Http()
    credentials = {'email': email, 'password': passwd}
    headers = {'content-type': 'application/json'}
    res, content = h.request(url, 'POST', json.dumps(credentials), headers)
    try:
        assert res.status == 200
    except AssertionError:
        raise ValueError(content)
    return json.loads(content)['data'][0]['token']

def get_from_doi(doi):
    url = URI_API_ENDP + "?uri=" + doi
    h = httplib2.Http()
    res, content = h.request(url, 'GET',
        headers={'Authorization': 'Bearer ' + API_JWTOKEN})
    try:
        assert res.status == 200
    except AssertionError:
        sys.stderr.write(content)
        sys.exit(1)

    return json.loads(content)['data']

def submit(url, data):
    h = httplib2.Http()
    headers = {'content-type': 'application/json',
               'Authorization': 'Bearer ' + API_JWTOKEN}
    res, content = h.request(url, 'POST', json.dumps(data), headers)
    try:
        assert res.status == 200
    except AssertionError:
        sys.stderr.write(content)
        sys.exit(1)

def get_uuid_from_uris(uris):
    uuid = ''
    for uri in uris:
        assert uuid == '' or uuid == uri['work']['UUID']
        uuid = uri['work']['UUID']
    return uuid

def get_uri_from_uris(uri, uris):
    for e in uris:
        if e['URI'] == uri:
            return e['URI']
    return ''

def standarise_uri(uri, canonical="false"):
    return {'URI': uri, 'canonical': canonical}

def process_uri(doi, uri):
    uris = get_from_doi(doi)
    uuid = get_uuid_from_uris(uris)
    assert uris and uuid

    # insert input URI if not already in database
    candidate = get_uri_from_uris(uri, uris)
    try:
        assert candidate == uri
    except AssertionError:
        new_uri = {'UUID': uuid, 'URI': uri, 'canonical': "false"}
        submit(URI_API_URIS, new_uri)

def run():
    _name, doi, uri = sys.argv
    assert API_JWTOKEN
    assert doi and uri
    process_uri(doi, uri)

API_JWTOKEN = get_token(AUTH_API_ENDP, URI_API_USER, URI_API_PASS)

if __name__ == '__main__':
    run()
